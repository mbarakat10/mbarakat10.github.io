[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "With 2 wins under their belt, the Sixers need to work on shooting\n\n\n\n\n\n\n\n\n\n\n\nNov 20, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nWillard teams at the free throw line\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nHow does the Terps season opener compare to previous seasons?\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland struggles to run the ball compared to Big Ten\n\n\n\n\n\n\n\n\n\n\n\nNov 5, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland volleyball bottom of the league in aces\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland wins higher percentage of low rush games\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nTerps football ranking high so far this season\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nTeams run on third and six about a quarter of the time\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland is playing better defensive volleyball\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland football is running more plays than any Big Ten team this season\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nFirst post!\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nMarwa Barakat\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/test-post/index.html",
    "href": "posts/test-post/index.html",
    "title": "First post!",
    "section": "",
    "text": "This is my first post!\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/maryland-offense-more-big-ten/index.html",
    "href": "posts/maryland-offense-more-big-ten/index.html",
    "title": "Maryland football is running more plays than any Big Ten team this season",
    "section": "",
    "text": "After leading the Big Ten conference in offensive plays by the end of last season, Penn State football has fallen behind this season.\nThe Terps have taken their spot, already showing they are running more plays this season.\nHere is how we compared the Big Ten teams’ offense.\nFirst, we loaded the necessary libraries and the football data from the 2023 season and the 2024 season thus far.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nCode\nfootball23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nfootball24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThen, we found the average number of offensive plays per game for the Big Ten teams in 2023.\n\n\nCode\naverages23 &lt;- football23 |&gt;\n  filter(Conference == 'Big Ten Conference') |&gt;\n  group_by(TeamFull) |&gt;\n  summarise(\n    average_offense = mean(OffensivePlays)\n  ) |&gt;\n  arrange(desc(average_offense))\n\n\nAnd this season.\n\n\nCode\naverages24 &lt;- football24 |&gt;\n  filter(Conference == 'Big Ten Conference') |&gt;\n  group_by(TeamFull) |&gt;\n  summarise(\n    average_offense = mean(OffensivePlays)\n  ) |&gt;\n  arrange(desc(average_offense))\n\n\nWe then created bar charts to see how teams compared to each other in offensive plays. We found that in 2023, Penn State finished on top with an average over 70 and Iowa at the bottom just under 60.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=averages23, \n    aes(\n      x=reorder(TeamFull, `average_offense`), \n      weight=`average_offense`\n      )\n    ) + \n  coord_flip() +\n  labs(\n    title=\"Penn State football led the Big Ten in offensive plays in 2023\", \n    x=\"School\", \n    y=\"Average Offensive Plays\"\n)\n\n\n\n\n\n\n\n\n\nSo far this season, Maryland has led the conference with an average over 70 and Purdue a little over 50.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=averages24, \n    aes(\n      x=reorder(TeamFull, `average_offense`), \n      weight=`average_offense`\n      )\n    ) + \n  coord_flip() +\n  labs(\n    title=\"Terps football leads the Big Ten in offensive plays\", \n    x=\"School\", \n    y=\"Average Offensive Plays\"\n)\n\n\n\n\n\n\n\n\n\nOn average, teams have had about 60 to 70 offensive plays per game in 2023 and 2024. But this season, with more teams in the conference, a couple of them have fallen behind at about 55.\nWhile Penn State led the conference last year, they are sitting at about average. Maryland, on the other hand, is already outperforming its last season with an average higher than any team in both seasons."
  },
  {
    "objectID": "posts/maryland-volleyball--defense-waffle/index.html",
    "href": "posts/maryland-volleyball--defense-waffle/index.html",
    "title": "Maryland is playing better defensive volleyball",
    "section": "",
    "text": "Maryland women’s volleyball is gaining more points from defensive plays than their Big Ten peer Northwestern.\nHere is how we figured that out.\nFirst, we loaded the necessary libraries and the most current women’s volleyball data. Then, we found the total number of kills, blocks, aces and opponent errors for both teams and saved those in a value for each school.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nvolleyball &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nmd_volleyball &lt;- volleyball |&gt;\n  filter(team == \"Maryland\") |&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos) + sum(block_assists),\n    total_aces = sum(aces),\n    total_opperr = sum(defensive_errors) \n  )\n\nmd &lt;- c(\"Kills\"=714, \"Blocks\"=253, \"Aces\"=127,\"OppErr\"=323)\n\nnw_volleyball &lt;- volleyball |&gt;\n  filter(team == \"Northwestern\") |&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos) + sum(block_assists),\n    total_aces = sum(aces),\n    total_opperr = sum(defensive_errors) \n  )\n\nnw &lt;- c(\"Kills\"=547, \"Blocks\"=207, \"Aces\"=61,\"OppErr\"=238, 364)\n\n\nFinally, we created a waffle chart showing the distribution of those points for each school.\n\n\nCode\nlibrary(waffle)\n\n\nWarning: package 'waffle' was built under R version 4.3.3\n\n\nCode\niron(\n   waffle(md/4, \n        rows = 10, \n        title=\"Maryland Volleyball\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"blue\", \"green\")\n        ),\n   waffle(nw/4, \n        rows = 10, \n        title=\"Northwestern Volleyball\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"blue\", \"green\", \"white\")\n        )\n)\n\n\n\n\n\n\n\n\n\nOverall, Maryland has more points from the combination of kills, blocks, aces and opponent errors than Northwestern. The greatest discrepancy between the two teams comes from Maryland’s kills. But Maryland beats them when comparing each of their points in those categories individually as well."
  },
  {
    "objectID": "posts/maryland-volleyball-defense-waffle/index.html",
    "href": "posts/maryland-volleyball-defense-waffle/index.html",
    "title": "Maryland is playing better defensive volleyball",
    "section": "",
    "text": "Maryland women’s volleyball is gaining more points from defensive plays than their Big Ten peer Northwestern.\nHere is how we figured that out.\nFirst, we loaded the necessary libraries and the most current women’s volleyball data. Then, we found the total number of kills, blocks, aces and opponent errors for both teams and saved those in a value for each school.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nvolleyball &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nmd_volleyball &lt;- volleyball |&gt;\n  filter(team == \"Maryland\") |&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos) + sum(block_assists),\n    total_aces = sum(aces),\n    total_opperr = sum(defensive_errors) \n  )\n\nmd &lt;- c(\"Kills\"=714, \"Blocks\"=253, \"Aces\"=127,\"OppErr\"=323)\n\nnw_volleyball &lt;- volleyball |&gt;\n  filter(team == \"Northwestern\") |&gt;\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos) + sum(block_assists),\n    total_aces = sum(aces),\n    total_opperr = sum(defensive_errors) \n  )\n\nnw &lt;- c(\"Kills\"=547, \"Blocks\"=207, \"Aces\"=61,\"OppErr\"=238, 364)\n\n\nFinally, we created a waffle chart showing the distribution of those points for each school.\n\n\nCode\nlibrary(waffle)\n\n\nWarning: package 'waffle' was built under R version 4.3.3\n\n\nCode\niron(\n   waffle(md/4, \n        rows = 10, \n        title=\"Maryland Volleyball\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"blue\", \"green\")\n        ),\n   waffle(nw/4, \n        rows = 10, \n        title=\"Northwestern Volleyball\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\", \"blue\", \"green\", \"white\")\n        )\n)\n\n\n\n\n\n\n\n\n\nOverall, Maryland has more points from the combination of kills, blocks, aces and opponent errors than Northwestern. The greatest discrepancy between the two teams comes from Maryland’s kills. But Maryland beats them when comparing each of their points in those categories individually as well."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Teams run on third and six about a quarter of the time",
    "section": "",
    "text": "It’s third down, and a team has six yards left to first down. What do teams do? Do they run, or do they throw a pass?\nWhen Maryland decided to run the ball during that play last season, losing a yard and eventually losing the game, people wondered where this decision came from.\nAfter analyzing football data from 2019 to the present, Maryland seems to run on these plays a similar amount to other teams.\nHere is how I analyzed that data:\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\nfbplays &lt;- load_cfb_pbp(\n  seasons = c(2019, 2020, 2021, 2022, 2023, 2024)\n)\n\n\n\nFind all plays where the down is 3 and the distance is 6, and save them to a new dataframe called third_and_six.\n\n\n\nCode\nthird_and_six &lt;- fbplays |&gt;\n  filter(\n    down == 3,\n    distance == 6\n  )\n\n\n\nCount the number of play types for those plays using group_by and summarize.\n\n\n\nCode\nthird_and_six |&gt;\n  group_by(play_type) |&gt;\n  summarise(\n    total = n()\n  ) |&gt;\n  arrange(desc(total))\n\n\n# A tibble: 22 × 2\n   play_type                  total\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception              4676\n 2 Pass Incompletion           3866\n 3 Rush                        3173\n 4 Penalty                     1068\n 5 Timeout                      929\n 6 Sack                         800\n 7 Passing Touchdown            496\n 8 Interception Return          257\n 9 Rushing Touchdown            135\n10 Fumble Recovery (Opponent)   101\n# ℹ 12 more rows\n\n\n\nHow many plays were run plays? 3389 total run plays out of almost 16000 third and six moments\n\n\n\nCode\nthird_and_six |&gt;\n  filter(rush&gt;0) |&gt;\n  summarise(\n    total = n(),\n  )\n\n\n# A tibble: 1 × 1\n  total\n  &lt;int&gt;\n1  3389\n\n\n\nWhat’s the percentage of all 3rd and 6 plays that were runs? about 22% of third and six plays were runs\n\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    total = n(),\n    total_rush = sum(rush&gt;0),\n    pct = total_rush/total\n  )\n\n\n# A tibble: 1 × 3\n  total total_rush   pct\n  &lt;int&gt;      &lt;int&gt; &lt;dbl&gt;\n1 15661       3389 0.216\n\n\n\nWhat was the average yards gained? about 6.1 yards on average were gained by teams from running on these plays\n\n\n\nCode\nthird_and_six |&gt;\n  filter(rush&gt;0) |&gt;\n  summarise(\n    avg_yards = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  avg_yards\n      &lt;dbl&gt;\n1      6.08\n\n\n\nHow many times has any team run on 3rd and 6 each year we have data for? In 2023, teams ran the most on these plays (822 times) and in 2020, teams ran only 301 times\n\n\n\nCode\nthird_and_six |&gt; \n  filter(rush&gt;0) |&gt;\n  group_by(year) |&gt;\n  summarise(\n    total = n()\n  )\n\n\n# A tibble: 6 × 2\n   year total\n  &lt;int&gt; &lt;int&gt;\n1  2019   519\n2  2020   301\n3  2021   527\n4  2022   819\n5  2023   822\n6  2024   401\n\n\n\nWhich team has done it the most? In total, Navy has run the most on these plays (on totals alone, not averages)\n\n\n\nCode\nthird_and_six |&gt;\n  filter(rush&gt;0) |&gt;\n  group_by(pos_team) |&gt;\n  summarise(\n    total = n()\n  ) |&gt;\n  arrange(desc(total))\n\n\n# A tibble: 280 × 2\n   pos_team         total\n   &lt;chr&gt;            &lt;int&gt;\n 1 Navy                60\n 2 Army                51\n 3 Air Force           42\n 4 Georgia Southern    35\n 5 New Mexico          32\n 6 Ole Miss            31\n 7 Kent State          30\n 8 Baylor              29\n 9 Georgia Tech        29\n10 Louisiana           29\n# ℹ 270 more rows\n\n\nOn third and six plays, Maryland runs the ball about 24 percent of the time, a very slight increase from the total average of 22%.\n\n\nCode\nmd_third_six &lt;- third_and_six |&gt;\n  filter(pos_team == \"Maryland\") \n\nmd_third_six|&gt;\n  summarise(\n    total_plays = n(),\n    total_rush = sum(rush&gt;0),\n    pct_rush = total_rush/total_plays\n  )\n\n\n# A tibble: 1 × 3\n  total_plays total_rush pct_rush\n        &lt;int&gt;      &lt;int&gt;    &lt;dbl&gt;\n1          72         17    0.236\n\n\nOn average, Maryland has gained 6.4 yards from running on third and six plays since 2019, slightly more than the total average of 6.1.\n\n\nCode\nmd_third_six|&gt;\n  filter(pos_team== \"Maryland\") |&gt; filter(rush&gt;0) |&gt;\n  summarise(\n    avg_yards = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  avg_yards\n      &lt;dbl&gt;\n1      6.41\n\n\n2023 vs 2024\n\n\nCode\nmd_third_six |&gt;\n  filter(year &gt;= 2023) |&gt;\n  filter(week &lt;= 7) |&gt;\n  group_by(year) |&gt;\n  summarise(\n    total = n(),\n    total_rush = sum(rush),\n    pct_rush = total_rush/total,\n    avg_yards = mean(yards_gained)\n  )\n\n\n# A tibble: 2 × 5\n   year total total_rush pct_rush avg_yards\n  &lt;int&gt; &lt;int&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1  2023     8          5    0.625      3.25\n2  2024     9          1    0.111      5.11\n\n\nMaryland is running less on third and six this season compared to the same period last season. The one time Maryland did run it this season, it gained about 5 yards, which is greater than the average of the five runs in this same situation from last season.\n\n\nCode\nbigten &lt;- third_and_six |&gt;\n  filter(pos_team %in% c(\"Indiana\",\"Oregon\",\"Penn State\",\"Illinois\", \"Nebraska\", \"Ohio State\",\"Iowa\",\"Michigan\",\"Wisconsin\",\"Minnesota\",\"Washington\",\"Rutgers\",\"Michigan State\",\"Northwestern\",\"USC\",\"Maryland\",\"Purdue\",\"UCLA\")) |&gt;\n  group_by(pos_team) |&gt;\n  summarise(\n    all = n(),\n    total_rush = sum(rush),\n    total_non_rush = all-total_rush,\n    pct_rush = total_rush/all\n  ) |&gt;\n  select(-all)\n\nbigten &lt;- bigten |&gt; \n  pivot_longer( \n    cols = starts_with(\"total\"), \n    names_to = \"Plays\", \n    values_to = \"Number\" )\n\n\nWhen looking at the Big Ten, teams run from about 11% of the time to about 31% of the time. Maryland falls closer to the higher end of those percentages.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Summarize total \"total_rush\" for each team\nrush_totals &lt;- bigten %&gt;%\n  filter(Plays == \"total_rush\") %&gt;%\n  group_by(pos_team) %&gt;%\n  summarise(total_rush = sum(Number))\n\n# Reorder 'pos_team' based on the total 'total_rush'\nbigten &lt;- bigten %&gt;%\n  left_join(rush_totals, by = \"pos_team\") %&gt;%\n  mutate(pos_team = reorder(pos_team, total_rush))\n\n# Plot the stacked bar chart\nggplot(bigten) + \n  geom_bar(\n    aes(x = pos_team, \n        weight = Number, \n        fill = Plays)) + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nNOTE: I had created a stacked bar chart that looked fine, but I wanted to arrange the bars by the total_rush to show which teams are running more at third and six. However, I could only arrange it from most to least overall totals. So, I had to use the help of ChatGPT to figure out the code to arrange it this way.\nIn the Big Ten, when looking at totals, Maryland falls around the middle of the road when it comes to the number of running plays at third and six. No team in the conference ran it more than 25 times from 2019 to the present.\nAlthough Maryland fans questioned the decision to run during last year’s homecoming game, it was not an unusual decision for the team to make. When it comes to third and six plays, Maryland has performed very similar to the average of teams across the country.\nIt wasn’t an unusual call but rather just an unlucky moment."
  },
  {
    "objectID": "posts/close-rushing-wins/index.html",
    "href": "posts/close-rushing-wins/index.html",
    "title": "Maryland wins higher percentage of low rush games",
    "section": "",
    "text": "When it comes to teams rushing less than 100 yards a game and still stealing a win, Maryland has a better track record than college teams in general.\nWhen looking at college football data from 2011 to 2024, around 5 percent of games were wins when teams ran such a small rushing yard total.\nThroughout those years, that number has varied slightly in the Big Ten Conference, where half the seasons resulted in higher percentages than the general data. One season, about 10 percent of games were wins with less than 100 yards rushed.\nBut Maryland has seen slightly better success. In the 2012 season, the team ran less than 100 yards and won in about a quarter of its games.\nOut of Maryland’s seven games so far this season, the team ended three of them with less than 100 yards rushed — and won only one of those games.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\nseason &lt;- winlosslogs |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    total_games = n()\n  )\n\nwin_rushes &lt;- winlosslogs |&gt;\n  filter(wins==1) |&gt; filter(RushingYds&lt;100) |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    total_wins = n()\n  )\n\nsmall_rush_wins &lt;- inner_join(season, win_rushes, by=\"Season\") |&gt;\n  mutate(\n    pct = (total_wins/total_games)*100\n  )\n\nseason_big_ten &lt;- winlosslogs |&gt;\n  filter(Conference==\"Big Ten Conference\") |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    total_games = n()\n  )\n  \nbig_ten_rush_wins &lt;- winlosslogs |&gt;\n  filter(Conference==\"Big Ten Conference\") |&gt;\n  filter(wins==1) |&gt; filter(RushingYds&lt;100) |&gt; \n  group_by(Season) |&gt;\n  summarise(\n    total_wins = n()\n  )\n\nbig_ten_small_rush_wins &lt;- inner_join(season_big_ten, big_ten_rush_wins, by=\"Season\") |&gt;\n  mutate(\n    pct = (total_wins/total_games)*100\n  )\n\nmd_season &lt;- winlosslogs |&gt;\n  filter(Team==\"Maryland\") |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    total_games = n()\n  )\n  \nmd_rush_wins &lt;- winlosslogs |&gt;\n  filter(Team==\"Maryland\") |&gt;\n  filter(wins==1) |&gt; filter(RushingYds&lt;100) |&gt; \n  group_by(Season) |&gt;\n  summarise(\n    total_wins = n()\n  )\n\nmd_small_rush_wins &lt;- inner_join(md_season, md_rush_wins, by=\"Season\") |&gt;\n  mutate(\n    pct = (total_wins/total_games)*100\n  )\n\nmd &lt;- winlosslogs |&gt;\n  filter(Team==\"Maryland\")\n\nggplot() + \n  geom_line(data=small_rush_wins, aes(x=Season, y=pct), color=\"black\") + \n  geom_line(data=big_ten_small_rush_wins, aes(x=Season, y=pct), color=\"blue\") +\n  geom_point(data=md_small_rush_wins, aes(x=Season, y=pct), color=\"red\") +\n  scale_y_continuous(limits = c(0, 30.0)) +\n  scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)) +\n  labs(\n    title=\"Maryland wins higher percentage of small rush games\", \n    x=\"Season\", \n    y=\"Percent Wins\"\n) \n\n\nWarning in scale_x_discrete(limits = c(2011, 2012, 2013, 2014, 2015, 2016, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?\n\n\n\n\n\n\n\n\n\n\nFirst, we created a new dataframe that counts all the games in each season.Then, we created another dataframe that counts all the games where the winning team rushed for less than 100 yards. After, we joined the two and calculated a percentage of small rushing win games. Then, we did the same analysis for Big Ten and Maryland games."
  },
  {
    "objectID": "posts/md-football-ypp/index.html",
    "href": "posts/md-football-ypp/index.html",
    "title": "Terps football ranking high so far this season",
    "section": "",
    "text": "Both Maryland football’s offense and defense have shined in the last two seasons, keeping the team above average.\nIn an analysis of the Terps’ performance over the past decade compared to other teams, Maryland’s offense has varied more greatly from below to above average than the defense, which has mostly been above average.\nBelow is how we completed this analysis.\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\n\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\nwinlosslogs |&gt; \n  group_by(Team, Season) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n\n\nCode\nmd &lt;- ypp |&gt; filter(Team==\"Maryland\")\n\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n\n\n# A tibble: 1 × 2\n  offense defense\n    &lt;dbl&gt;   &lt;dbl&gt;\n1    5.74    5.61\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=md, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.740424) + \n  geom_hline(yintercept = 5.609849) +\n  geom_text_repel(\n    data=md, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  ) +\n  labs(title=\"Maryland shines in last two seasons\", subtitle=\"The Terps' offense and defense have kept team above average.\", caption=\"Source: NCAA | By Marwa Barakat\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\nBy charting all of the team’s data and highlighting Maryland, it’s clear the Terps have always had pretty decent defensive stats, excluding a few seasons where they fell a little short of average.\nNot including the 2012 season, Maryland has maintained close to average in some way without any major outliers.\nAlthough the 2024 season is still incomplete, it’s shaping up to be one of Maryland’s best in the last decade as long as they can maintain or improve their offensive statistics."
  },
  {
    "objectID": "posts/volleyball-aces/index.html",
    "href": "posts/volleyball-aces/index.html",
    "title": "Maryland volleyball bottom of the league in aces",
    "section": "",
    "text": "Maryland volleyball fell behind most NCAA teams last season with subpar aces statistics.\nIn an analysis of last season’s active players with above average aces per match, the few Maryland players reaching this level are outperformed by most players across various positions.\nOnly three Maryland players from last season finished with more than 25 aces – which about a quarter of players across the league reached.\nThe three players – Erin Engel, Sam Csire and Lilly Gunter – are a setter, an opposite hitter and a defensive specialist, respectively. When compared to players in the same positions, the Terps were on the lower end of average for aces throughout the season.\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse)) \n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(janitor))\nsuppressPackageStartupMessages(library(ggbeeswarm))\n\n\nWarning: package 'ggbeeswarm' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(ggrepel))\n\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\nCode\nset.seed(1234)\n\nsuppressMessages(players &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\") |&gt; clean_names())\n\nactiveplayers &lt;- players |&gt; filter(mp&gt;20) |&gt; filter(pos != \"NA\")\n\n activeplayers |&gt;\n  group_by(last_name) |&gt;\n  summarise(\n    acespermatch = aces/gp\n  )\n\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'last_name'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3,223 × 2\n# Groups:   last_name [2,501]\n   last_name  acespermatch\n   &lt;chr&gt;             &lt;dbl&gt;\n 1 Abel             0     \n 2 Abner            0.32  \n 3 Abraham          0.818 \n 4 Abramovich       0.913 \n 5 Abutbul          0     \n 6 Achtzehn         0.0938\n 7 Ackerman         0.435 \n 8 Adam             0     \n 9 Adams            0.233 \n10 Adams            1.07  \n# ℹ 3,213 more rows\n\n\nCode\nsummary(activeplayers$aces)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    4.00   15.00   15.82   25.00   73.00 \n\n\nCode\nactive &lt;- activeplayers |&gt; filter(aces &gt; 25)\n\numd &lt;- activeplayers |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(aces &gt; 25) |&gt; \n  arrange(desc(aces/gp))\n\nggplot() + \n  geom_beeswarm(\n    data=active, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces/gp), color=\"grey\") + \n  geom_beeswarm(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces/gp), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=aces/gp, label=full_name)) +\n  labs(\n    title = \"Terps volleyball unimpressive in aces statistics\"\n    )\n\n\nWarning: The `groupOnX` argument of `geom_beeswarm()` is deprecated as of ggbeeswarm\n0.7.1.\nℹ ggplot2 now handles this case automatically.\n\n\n\n\n\n\n\n\n\n\nTo find these conclusions, we decided to include only those players who have played at least 20 matches. Then, we calculated the number of aces per match each player got. We then narrowed it down to players in the upper quartile of aces across the season. This plot shows aces per match for each position for all players, with a highlight on Maryland players."
  },
  {
    "objectID": "posts/running-on-empty/index.html",
    "href": "posts/running-on-empty/index.html",
    "title": "Maryland struggles to run the ball compared to Big Ten",
    "section": "",
    "text": "When it comes to running the ball and (actually) gaining yards, Maryland generally falls behind the rest of the Big Ten.\nWhile the conference sees an average of about 4 yards gained per rushing attempt so far this season, the Terps have averaged less than that almost every game.\nBut Maryland is not alone, with teams like UCLA and Northwestern facing similar circumstances.\nWhile many teams are riding close to the average, Iowa and USC, have the rest of the Big Ten beat in rushing yards.\nThe most interesting case in the conference: Purdue. With a high of about 7.5 average yards gained per rush attemp in a game to a low of about 1, the Boilermakers are struggling to consistently run the ball.\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nCode\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1136 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nbigten &lt;- logs |&gt; filter(Conference == \"Big Ten Conference\")\n\nggplot() + \n  geom_line(data=bigten, aes(x=Date, y=RushingAvg, group=Team))\n\n\n\n\n\n\n\n\n\nCode\nbigten |&gt; summarise(mean(RushingAvg))\n\n\n# A tibble: 1 × 1\n  `mean(RushingAvg)`\n               &lt;dbl&gt;\n1               4.36\n\n\nCode\nbigten &lt;- bigten |&gt; mutate(Games = as.character(Game))\n\nggplot() + \n  geom_hline(yintercept=4.362821, color=\"blue\") + \n  geom_line(data=bigten, aes(x=Games, y=RushingAvg, group=Team)) + \n  facet_wrap(~Team) +\n  labs(\n    title = \"Maryland falls behind Big Ten in rushing yards\",\n    subtitle = \"The conference averages about 4 yards per rushing attempt.\"\n    )"
  },
  {
    "objectID": "posts/early-basketball-season/index.html",
    "href": "posts/early-basketball-season/index.html",
    "title": "How does the Terps season opener compare to previous seasons?",
    "section": "",
    "text": "With Maryland basketball’s winning season opener earlier this week, the Terps are off to a great start. But was it luck or does the team usually start seasons on the right foot?\nBy comparing the team’s first six games of every season in the last decade to this year’s first three, we found that the team have had a higher average field goal accuracy than their opponents almost every season.\nAlthough this season’s games saw a field goal percentage of just over 45 percent, the team reached higher most other seasons.\nTheir best season start was about a decade ago in 2015 where the team had an average field goal percentage over 50 percent, indicating great shooting accuracy.\nUnfortunately for the Terps, their worst season start was just last year – the one season when their opponents made more of their shots.\nAs the season gets underway, will Maryland return to old glory or will they find themselves falling behind early?\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(ggalt))\n\n\nWarning: package 'ggalt' was built under R version 4.3.3\n\n\nCode\nsuppressWarnings(suppressMessages(logs &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/dwillis.github.io/main/docs/sports-data-files/cbblogs1525.csv\")))\n\nmd &lt;- logs |&gt;\n  filter(Team=='Maryland')\n\nmd_early &lt;- logs |&gt;\n  filter(Team=='Maryland') |&gt;\n  filter(Game&lt;=6) \n\nmd_early &lt;- md_early |&gt;\n  group_by(Season) |&gt;\n  summarise(\n    mean_team = mean(TeamFGPCT),\n    mean_opp = mean(OpponentFGPCT)\n  )\n\nggplot() + \n  geom_dumbbell(\n    data=md_early, \n    aes(y=reorder(Season, mean_team), x=mean_team, xend=mean_opp),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") + \n  theme_minimal() +\n  labs(\n    title = \"Maryland outshooting in early season games\",\n    subtitle = \"The Terps more accurate than opponents almost every season in last decade\",\n    y = \"Season\",\n    x = \"Average Field Goal PCT\"\n  )\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead."
  },
  {
    "objectID": "posts/kevin-willard-teams/index.html",
    "href": "posts/kevin-willard-teams/index.html",
    "title": "Willard teams at the free throw line",
    "section": "",
    "text": "How does one compare a Big East team to a Big Ten team? And how do we compare the two teams under the same coach?\nI wanted to look at something simple: how well are each of these teams throwing free throws? And how does that impact their overall performance each season?\nI went into this thinking I could see if Kevin Willard boosted Maryland’s free throw percentages, causing them to win more games.\nI was only right about half of that statement. Under Willard, Maryland’s last two seasons have seen a greater free throw percentage than most of his seasons at Seton Hall.\nBut ultimately, this made no difference in the overall number of season wins. The two teams, in different conferences, have about the same win record under Willard.\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(janitor)) \n\nsuppressMessages(logs &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1525.csv\"))\n\nsetonhall &lt;- logs |&gt;\n  filter(Team=='Seton Hall') |&gt; filter(Season!='2022-2023', Season!='2023-2024', Season!='2024-2025')\n\nsetonhall_wins &lt;- setonhall |&gt;\n  mutate(\n    winloss = case_when(\n      grepl(\"W\", W_L) ~ 1, \n      grepl(\"L\", W_L) ~ 0)\n    )\n\nsetonhall_graph &lt;- setonhall_wins |&gt;\n  group_by(Season) |&gt; filter(Season!='2024-2025') |&gt;\n  summarise(\n    wins = sum(winloss), \n    avg_ft = mean(TeamFTPCT)\n    ) |&gt; na.omit()\n\nmd &lt;- logs |&gt;\n  filter(Team=='Maryland') |&gt; filter(Season=='2022-2023' | Season=='2023-2024'| Season=='2024-2025')\n\nmd_wins &lt;- md |&gt;\n  mutate(\n    winloss = case_when(\n      grepl(\"W\", W_L) ~ 1, \n      grepl(\"L\", W_L) ~ 0)\n    )\n\nmd_graph &lt;- md_wins |&gt;\n  group_by(Season) |&gt; filter(Season!='2024-2025') |&gt;\n  summarise(\n    wins = sum(winloss), \n    avg_ft = mean(TeamFTPCT)\n    ) |&gt; na.omit()\n\nggplot() + \n  geom_point(data=setonhall_graph, aes(x=avg_ft, y=wins)) +\n  geom_point(data=md_graph, aes(x=avg_ft, y=wins), color=\"red\") +\n  scale_y_continuous(limits = c(0,25)) +\n  labs(\n    title = \"Kevin Willard's team wins not affected by free throws\",\n    subtitle = \"Under Willard, the Terps are throwing better free throws compared to his Seton Hall team.\",\n    x = \"Season Average FT Pct\",\n    y = \"Season Wins\"\n  )"
  },
  {
    "objectID": "posts/nba-lineups/index.html",
    "href": "posts/nba-lineups/index.html",
    "title": "With 2 wins under their belt, the Sixers need to work on shooting",
    "section": "",
    "text": "About a fifth of the way into the NBA season, the 76ers are struggling to take some wins.\nWith a 2-11 record, the Sixers have had 68 variations of lineups - struggling to find a well-functioning group of players.\nHow do these different lineups compare in terms of shooting?\nOnly four combinations of players have won all of the games they played together. With only two winning games, this is not too surprising.\nRookie Jared McCain is in two of those combinations, and Sixers new addition Paul George is in three of them.\nBut more surprising is that these combinations actually have worse average or below average field goal and three-point percentages. With about 22 total minutes played, they’ve lacked in shooting but still pushed the team to a win.\n\n\nCode\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(hoopR))\n\n\nWarning: package 'hoopR' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(ggalt))\n\n\nWarning: package 'ggalt' was built under R version 4.3.3\n\n\nCode\nsuppressPackageStartupMessages(library(janitor))\nsuppressPackageStartupMessages(library(ggrepel))\n\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\nCode\nteam_id &lt;- 1610612755\n\nlineups &lt;- nba_leaguedashlineups(season=\"2024-25\")\n\ncurrent &lt;- lineups[[1]]\n\ncurrent &lt;- current |&gt;\n  mutate(across(6:57, as.numeric)) |&gt; clean_names()\n\ncurrent_phil &lt;- current |&gt; filter(team_abbreviation=='PHI')\n\ncurrent_phil_top &lt;- current_phil |&gt; filter(w_pct&gt;0.5)\n\n\ncurrent_phil_bottom &lt;- current_phil |&gt; filter(w_pct&lt;0.5)\n\ncurrent_phil |&gt; \n  summarise(\n    avg_fg = mean(fg_pct), \n    avg_3 = mean(fg3_pct)\n    )\n\n\n# A tibble: 1 × 2\n  avg_fg avg_3\n   &lt;dbl&gt; &lt;dbl&gt;\n1  0.480 0.356\n\n\nCode\nggplot() + \n  geom_point(\n    data=current_phil, \n    aes(x=fg_pct, y=fg3_pct, size=w_pct),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Win Pct\") +\n  geom_point(\n    data=current_phil_top, \n    aes(x=fg_pct, y=fg3_pct, size=w_pct), \n    color=\"blue\") +\n  geom_vline(xintercept = 0.4801618) + \n  geom_hline(yintercept = 0.3558529) +\n  geom_text_repel(\n    data=current_phil_top, \n    aes(x=fg_pct, y=fg3_pct, label='100% win')\n  ) +\n  labs(title=\"Only four 76ers lineups have a perfect record.\", subtitle=\"The Sixers most successful lineups have lower shooting averages than their losing lineups.\", caption=\"Source: NBA | By Marwa Barakat\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 10, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  }
]